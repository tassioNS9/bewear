
Criando o Projeto --> npx create-next-app@15.4.1 bewear

Instalar o shadcn ==> npx shadcn@2.9.2 init

npx shadcn@2.9.2 add button

Ordenar as classes do taiwlind com prettier --> npm install -D prettier@3.6.2 prettier-plugin-tailwindcss@0.6.14

Ordenar os imports ==> npm install --save-dev eslint-plugin-simple-import-sort@12.1.1

Arquivo .vscode/settings.json --> Para quando salvar organizar os imports automaticamente

Instalando o ORM drizzle e o drizzle-seed --> npm i drizzle-orm@0.44.2 drizzle-seed@0.3.1 pg@8.16.3 dotenv@17.1.0

Instalando drizzle-kit --> npm i -D drizzle-kit@0.31.4 @types/pg@8.15.4 tsx@4.20.3

db/index.ts --> configuração para o banco de dados

Pegar o schema e criar as tabelas no banco --> npx drizzle-kit push

Popular o banco com o seed --> npx tsx --env-file=.env src/db/seed.ts

npx shadcn@2.9.2 add card form --> adicionando card e formulário

npx shadcn@2.9.2 add input tabs --> adicionando input e tabs

npx shadcn@2.9.2 add sonner --> Para avisos na tela

npx shadcn@2.9.2 add separator --> Para linhas horizontais

npx shadcn@2.9.2 add scroll-area --> para o carrinho ao lado na tela	

npx shadcn@2.9.2 add dialog --> Para criação de avisos e confirmações																							


-----Autenticação---
npm i better-auth@1.2.12 --> instalação better-auth
1 - Adicionar a BETTER_AUTH_SECRET no .env
2 - Adicionar o lib/auth.ts --> utilizando credenciais do drizzle
3- Instalar o better-auth cli -> npx @better-auth/cli@1.2.12 generate
4 - Com o Cli vai gerar as tabelas do user e agora adicionar no schema.ts das suas tabelas
5 - Depois da um npx drizzle-kit push --> para atualizar as tabelas do banco
6 - Adicionar o arquivo api/auth/[...all]/route.ts e o auth-client.ts já na documentação
7 - Configurar o lib/auth.ts para as credenciais de email e senha e  Google
-------------------------

-- Autenticação com o Google----
1 - Ir no Google cloud Console para criar o projeto
2 - Depois vai em Api e services, depois em credentials, em OAuth consent screen, coloca o email de contato, em Audience coloca external
3 - Depois vai em Create OAuth client
4- No lugar das Urls colocar o localhost:3000 e no outro localhost:3000/api/auth/callback/google e clica em criar e pega as chaves
5 - No auth.ts colocar o socialProviders com as chaves do .env

-------- Integração com Stripe ---------
Para as variaveis de ambiente ser acessadas em client component precisamos colocar o NEXT_PUBLIC na frente da variavel NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
1 - npm i stripe@18.4.0 --> instalação do stripe
2 - Criar a action create-checkout-session
3 - npm i @stripe/stripe-js@7.8.0
4 - Realiza as configurações no finish-order-button.tsx
5 - Cria a rota em stripe/weebook A rota que o stripe chama passando a informação que o pagamento foi aprovado para o pedido
6 - Agora configurar o weebook no stripe vai em weebooks em setar como ouvinte para chamar o localhost entao precisamos baixar o stripe CLI
7 - Depois de baixar o executável e configurar na variável de ambiente, da um stripe login , depois stripe listen --forward-to localhost:3000/api/stripe/webhook (deve fica rodando),
passando a rota da api vai gerar a chave para colocar no .env

npx shadcn@2.9.2 add avatar --> para colocar imagens de avatar
npx shadcn@2.9.2 add sheet --> Para a interação do header abrir e fechar
npm install @tanstack/react-query@5.83.0 --> faz requisições pelo client side

OBS: Quando a gente utiliza o react-query por volta da aplicação, estamos reenderizando um server component dentro de um client component entretando como ele ta passando como prop
(children) nesse caso é permitido!

npm i react-number-format@5.4.4 --> para formatações de campo de formulário(Mascaras de telefone, cpf ...)
